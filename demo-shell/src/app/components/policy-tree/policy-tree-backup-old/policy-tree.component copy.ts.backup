import { Component, ViewChild, ViewChildren, QueryList, ChangeDetectorRef } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource, MatTable } from '@angular/material/table';

/**
 * @title Table with expandable rows
 */
@Component({
  selector: 'policy-tree',
  templateUrl: './policy-tree.component.html',
  styleUrls: ['./policy-tree.component.css'],
  animations: [
    trigger('detailExpand', [
      state('collapsed', style({ height: '0px', minHeight: '0' })),
      state('expanded', style({ height: '*' })),
      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
  ],
})
export class PolicyTreeComponent {

  @ViewChild('outerSort', { static: true }) sort: MatSort;
  @ViewChildren('innerSort') innerSort: QueryList<MatSort>;
  @ViewChildren('innerTables') innerTables: QueryList<MatTable<Address>>;
  @ViewChildren('innerTables2') innerTables2: QueryList<MatTable<PropertyDetails>>;

  dataSource: MatTableDataSource<User>;
  dataSource2: MatTableDataSource<any>;
  usersData: User[] = [];
  addressData: Address[] = [];
  columnsToDisplay = ['name', 'email', 'phone'];
  innerDisplayedColumns = ['street', 'zipCode', 'city'];
  thirdLevelDisplayedColumns = ['type', 'code'];

  expandedElement: User | null;
  expandedElement2: Address | null;

  constructor(
    private cd: ChangeDetectorRef
  ) { }

  ngOnInit() {
    USERS.forEach(user => {
      if (user.addresses && Array.isArray(user.addresses) && user.addresses.length) {
        this.usersData = [...this.usersData, { ...user, addresses: new MatTableDataSource(user.addresses) }];
      }
      else {
        this.usersData = [...this.usersData, user];
      }
    });
    this.dataSource = new MatTableDataSource(this.usersData);
    this.dataSource.sort = this.sort;

    //////////////////////////

    // USERS.forEach(user => {
    //       user.addresses.forEach(address => {
    //         if (address.permits) {
    //           this.addressData = [...this.addressData, { ...address, permits: new MatTableDataSource(address.permits) }];
    //         }
    //         else {
    //           this.addressData = [...this.addressData, address];
    //         }
    //       });
    // });

      
      var addressList = USERS[0].addresses;
      
      this.addressData = [...this.addressData, { ...user.address, permits: new MatTableDataSource(address.permits) }];

    this.dataSource2 = new MatTableDataSource(this.addressData);
    this.dataSource2.sort = this.sort;


  }

  toggleRow(element: User) {
    element.addresses && (element.addresses as MatTableDataSource<Address>).data.length ? (this.expandedElement = this.expandedElement === element ? null : element) : null;
    this.cd.detectChanges();
    this.innerTables.forEach((table, index) => (table.dataSource as MatTableDataSource<Address>).sort = this.innerSort.toArray()[index]);
  }

  toggleRow2(element: Address) {
    console.log("LOGGIN INSIDE toogleRow2 >>> ");
    element.permits && (element.permits as MatTableDataSource<Permit>).data.length ? (this.expandedElement2 = this.expandedElement2 === element ? null : element) : null;
    this.cd.detectChanges();
    this.innerTables2.forEach((table, index) => (table.dataSource as MatTableDataSource<Permit>).sort = this.innerSort.toArray()[index]);
  }

  applyFilter(filterValue: string) {
    // this.innerTables.forEach((table, index) => (table.dataSource as MatTableDataSource<Address>).filter = filterValue.trim().toLowerCase());
    this.innerTables.forEach((table) => (table.dataSource as MatTableDataSource<Address>).filter = filterValue.trim().toLowerCase());
  }
}

export interface User {
  name: string;
  email: string;
  phone: string;
  // addresses?: Address[] | MatTableDataSource<Address>;
  addresses: Address[] | MatTableDataSource<Address>;
}

export interface Address {
  street: string;
  zipCode: string;
  city: string;
  permits: Permit[] | MatTableDataSource<Permit>;
}

export interface Permit {
  type: string;
  code: string;
}

// export interface UserDataSource {
//   name: string;
//   email: string;
//   phone: string;
//   addresses?: MatTableDataSource<Address>;
// }

// export interface AddressDataSource {
//   street: string;
//   zipCode: string;
//   city: string;
//   propertyDetails?: MatTableDataSource<PropertyDetails>;
// }

var USERS: User[] = [
  {
    name: "Mason",
    email: "mason@test.com",
    phone: "9864785214",
    addresses: [
      {
        street: "Street 1",
        zipCode: "78542",
        city: "Kansas",
        permits: [
          { type: "Residential", code: 'RD01' },
          { type: "Commercial", code: 'CD03' }
        ]
      },
      {
        street: "Street 2",
        zipCode: "78554",
        city: "Texas",
        permits: [
          { type: "Investment", code: 'INV009' },
          { type: "Commercial", code: 'CD03' }
        ]
      }
    ]
  },
  {
    name: "Eugene",
    email: "eugene@test.com",
    phone: "8786541234",
    addresses: []
  },
  {
    name: "Jason",
    email: "jason@test.com",
    phone: "7856452187",
    addresses: [
      {
        street: "Street 5",
        zipCode: "23547",
        city: "Utah",
        permits: [
          { type: "Residential", code: 'RD01' },
          { type: "Investment", code: 'INV007' }
        ]
      },
      {
        street: "Street 5",
        zipCode: "23547",
        city: "Ohio",
        permits: [
          { type: "Residential", code: 'RD01' },
          { type: "Commercial", code: 'CD03' }
        ]
      }
    ]
  }
];


<table mat-table [dataSource]="dataSource" multiTemplateDataRows class="mat-elevation-z8" matSort>

    <ng-container matColumnDef="{{column}}" *ngFor="let column of columnsToDisplay">
		<ng-container *ngIf="column !== 'action'; else action">
            <th mat-header-cell *matHeaderCellDef mat-sort-header> {{column}} </th>
            <td mat-cell *matCellDef="let element"> {{element[column]}} </td>    
        </ng-container>
        <ng-template #action>
            <th mat-header-cell *matHeaderCellDef> </th>
            <td mat-cell *matCellDef="let element">
              <mat-icon (click)="expandedElement = expandedElement === element ? null : element">{{expandedElement === element ? 'remove_circle_outline' : 'add_circle_outline'}}</mat-icon>
            </td>
          </ng-template>
	</ng-container>

    



	<!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->
	<ng-container matColumnDef="expandedDetail">
		<td mat-cell *matCellDef="let element" [attr.colspan]="columnsToDisplay.length">
			<div class="example-element-detail" *ngIf="element.addresses?.data.length" [@detailExpand]="isExpanded(element)">
				<div class="inner-table mat-elevation-z8" *ngIf="isExpanded(element)">

					<table #innerTables mat-table [dataSource]="element.addresses" multiTemplateDataRows matSort>
						<ng-container matColumnDef="{{innerColumn}}" *ngFor="let innerColumn of innerDisplayedColumns">
                            <th mat-header-cell *matHeaderCellDef mat-sort-header> {{innerColumn}} </th>
                            <td mat-cell *matCellDef="let element" (click)="toggleAddress(element)"> {{element[innerColumn]}} </td>    
                       </ng-container>
						<ng-container matColumnDef="innerExpandedDetail">
							<td mat-cell *matCellDef="let element" [attr.colspan]="displayedCommentColumns.length">
								<!-- <ul *ngIf="innerExpandedElements.includes(element)">
									<li *ngFor="let comment of element.comments">
										{{comment.commentStatus}} - {{comment.comment}}
									</li>
								</ul> -->
								<table *ngIf="innerExpandedElements.includes(element)" mat-table  [dataSource]="element.comments" matSort>
                                    <ng-container  matColumnDef="{{commentColumn}}" *ngFor="let commentColumn of displayedCommentColumns">
                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> {{commentColumn}} </th>
                                        <td mat-cell *matCellDef="let com_element"> {{com_element[commentColumn]}} </td>
                                    </ng-container>
                                    <tr mat-header-row *matHeaderRowDef="displayedCommentColumns"></tr>
                                    <tr mat-row *matRowDef="let row; columns: displayedCommentColumns;"  [class.example-element-row3]="element.addresses?.data.length" [class.example-expanded-row3]="expandedElement === element"></tr>
                                </table>
							</td>
						</ng-container>
						<tr mat-header-row *matHeaderRowDef="innerDisplayedColumns"></tr>
						<tr mat-row *matRowDef="let row; columns: innerDisplayedColumns;" [class.example-element-row2]="element.addresses?.data.length" [class.example-expanded-row2]="expandedElement === element"></tr>
						<tr mat-row *matRowDef="let row; columns: ['innerExpandedDetail']" class="example-detail-row"></tr>
						
					</table>
				</div>
			</div>
		</td>
	</ng-container>

	<tr mat-header-row *matHeaderRowDef="columnsToDisplay"></tr>
	<tr mat-row *matRowDef="let element; columns: columnsToDisplay;"
		[class.example-element-row]="element.addresses?.data.length" [class.example-expanded-row]="expandedElement === element"
		(click)="toggleRow(element)">
	</tr>
	<tr mat-row *matRowDef="let row; columns: ['expandedDetail']" class="example-detail-row"></tr>
</table>

<!-- <mat-paginator [pageSizeOptions]="[5, 10, 20]"
showFirstLastButtons
aria-label="Select page of periodic elements">
</mat-paginator> -->


<!-- Copyright 2019 Google Inc. All Rights Reserved.
    Use of this source code is governed by an MIT-style license that
    can be found in the LICENSE file at http://angular.io/license -->
<!-- 
    [class.example-expanded-row]="expandedElement === element" 
    [class.example-expanded-row]="isExpanded(element)" -->